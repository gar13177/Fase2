/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

PARSER_BEGIN(CocoR)

public class CocoR {

  public static void main(String args[]) {
    CocoR parser;
    if (args.length == 0) {
      System.out.println("IDL Parser Version 0.1:  Reading from standard input . . .");
      parser = new CocoR(System.in);
    } else if (args.length == 1) {
      System.out.println("IDL Parser Version 0.1:  Reading from file " + args[0] + " . . .");
      try {
        parser = new CocoR(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("IDL Parser Version 0.1:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("IDL Parser Version 0.1:  Usage is one of:");
      System.out.println("         java CocoR < inputfile");
      System.out.println("OR");
      System.out.println("         java CocoR inputfile");
      return;
    }
    try {
      parser.CocoL();
      System.out.println("IDL Parser Version 0.1:  IDL file parsed successfully.");
    } catch (ParseException e) {
      System.out.println("IDL Parser Version 0.1:  Encountered errors during parse.");
    }
  }

}

PARSER_END(CocoR)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  < " " >
| < "\t" >
| < "\n" >
| < "\r" >
| < "//" (~["\n"])* "\n" >
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "#" ([" ","\t"])* (["0"-"9"])+
    (([" ","\t"])* "\"" (~["\""])+ "\""
           ([" ","\t"])* (["0"-"9"])* ([" ","\t"])* (["0"-"9"])*)? "\n" >
}

/* Production 1 */

void CocoL() :
{}
{
  "COMPILER" ident() 
  ScannerSpecification()
  "END" ident() "."
}

/* Production 2 */

void ScannerSpecification() :
{}
{
  ( "CHARACTERS"  SetDecl()  )?
  ( "KEYWORDS" KeywordDecl()  )?
}

/* Production 3 */

void SetDecl() :
{}
{
  ident() "=" Set() "."
}

/* Production 4 */

void Set() :
{}
{
  BasicSet() ( ("+"|"-") BasicSet())*
}

/* Production 5 */

void BasicSet() :
{}
{
  string() | ident() | Char() ( ".." Char())?
}

/* Production 6 */

void Char() :
{}
{
  <CHAR> | "CHR" "(" number() ")"
}

/* Production 7 */

void KeywordDecl() :
{}
{
  ident() "=" string() "."
}


/* Definitions of complex regular expressions follow */

void ident() :
{}
{
  <LETTER> (<LETTER> | <DIGIT>)*
}

void number() :
{}
{
  <DIGIT> (<DIGIT>)*
}

void string() :
{}
{
  "\"" (<LETTER> | <DIGIT>)* "\""
}



TOKEN :
{
  <  LETTER : ["a"-"z","A"-"Z"] >
| <  DIGIT : ["0"-"9"] >
| <  CHAR : <LETTER> | <DIGIT>>
}
